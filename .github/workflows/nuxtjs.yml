# https://github.com/actions/deploy-pages#usage
name: Deploy to GitHub Pages
on:
  workflow_dispatch:
  push:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: corepack enable
      - uses: actions/setup-node@v3
        with:
          node-version: "20"
      # Pick your own package manager and build script
      - run: npm install
      - run: npx nuxi generate --preset github_pages
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          name: github-pages
          path: ./.output/public
          
  # Deployment job
  deploy:
    # Add a dependency to the build job
    needs: build
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source
    # Deploy to the github_pages environment
    environment:
      name: github_pages
      url: ${{ steps.deployment.outputs.page_url }}
    # Specify runner + deployment step
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages

# jobs:
#   # Build job
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3
#       - name: Detect package manager
#         id: detect-package-manager
#         run: |
#           if [ -f "${{ github.workspace }}/yarn.lock" ]; then
#             echo "::set-output name=manager::yarn"
#             echo "::set-output name=command::install"
#             exit 0
#           elif [ -f "${{ github.workspace }}/package.json" ]; then
#             echo "::set-output name=manager::npm"
#             echo "::set-output name=command::ci"
#             exit 0
#           else
#             echo "Unable to determine packager manager"
#             exit 1
#           fi
#       - name: Setup Node
#         uses: actions/setup-node@v3
#         with:
#           node-version: "18"
#           cache: ${{ steps.detect-package-manager.outputs.manager }}
#       - name: Setup Pages
#         uses: actions/configure-pages@v2
#         with:
#           # Automatically inject router.base in your Nuxt configuration file and set
#           # target to static (https://nuxtjs.org/docs/configuration-glossary/configuration-target/).
#           #
#           # You may remove this line if you want to manage the configuration yourself.
#           static_site_generator: nuxt
#       - name: Restore cache
#         uses: actions/cache@v3
#         with:
#           path: |
#             dist
#             .nuxt
#           key: ${{ runner.os }}-nuxt-build-${{ hashFiles('dist') }}
#           restore-keys: |
#             ${{ runner.os }}-nuxt-build-
#       - name: Install dependencies
#         run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
#       - name: Static HTML export with Nuxt
#         run: ${{ steps.detect-package-manager.outputs.manager }} run generate
#       - name: Upload artifact
#         uses: actions/upload-pages-artifact@v1
#         with:
#           path: ./dist

